{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","utils.ts","index.tsx"],"names":["Pagination","total","perPage","currentPage","onPageChange","lastPage","Math","ceil","isFirsPage","isLastPage","lastPageList","className","classNames","disabled","href","onClick","content","i","push","active","getPageCountList","getItemListPerPage","items","from","to","numbers","n","getNumbers","map","App","useState","itemsPerPage","setItemsPerPage","setCurrentPage","totalItem","length","id","value","onChange","event","target","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"kNASaA,EAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEMC,EAAWC,KAAKC,KAAKN,EAAQC,GAC7BM,EAA6B,IAAhBL,EACbM,EAAaN,IAAgBE,EA8B7BK,EAAeD,EACjBR,EACAC,EAAUC,EAgCd,OACE,qCACE,qBAAIQ,UAAU,aAAd,UACE,oBAAIA,UAAWC,IAAW,YACxB,CAAEC,SAAUL,IADd,SAGE,mBACE,UAAQ,WACRG,UAAU,YACVG,KAAK,QACL,gBAAeN,EACfO,QA7Bc,WAGF,IAAhBZ,GAEFC,EADWD,EAAc,IAoBrB,oBApEiB,WAGvB,IAFA,IAAMa,EAAU,GADa,WAGpBC,GACPD,EAAQE,KACN,oBAEEP,UACEC,IAAW,YAAa,CACtBO,OAAQhB,IAAgBc,IAJ9B,SAQE,mBACE,UAAQ,WACRN,UAAU,YACVG,KAAI,WAAMG,GACVF,QAAS,kBAAMX,EAAaa,IAJ9B,SAMGA,KAbEA,KAHFA,EAAI,EAAGA,GAAKZ,EAAUY,GAAK,EAAI,EAA/BA,GAsBT,OAAOD,EAqDFI,GACD,oBAAIT,UAAWC,IAAW,YACxB,CAAEC,SAAUJ,IADd,SAGE,mBACE,UAAQ,WACRE,UAAU,YACVG,KAAK,QACL,gBAAeL,EACfM,QAlCc,WAGlBZ,IAAgBE,GAElBD,EADWD,EAAc,IAyBrB,uBAWJ,6BA7DuB,WAGzB,IAFA,IAAMa,EAAU,GAEPC,EAAIf,EAAUC,EAAcD,EAAU,EAC7Ce,GAAKP,EACLO,GAAK,EACLD,EAAQE,KAAK,oBAAI,UAAQ,OAAZ,wBAAoCD,IAAZA,IAGvC,OAAOD,EAqDFK,SC5GT,IAAMC,ECLC,SAAoBC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQP,KAAKQ,GAGf,OAAOD,EDFKE,CAAW,EAAG,IACzBC,KAAI,SAAAF,GAAC,qBAAYA,MAEPG,EAAgB,WAC3B,MAAwCC,mBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAsCF,mBAAS,GAA/C,mBAAO3B,EAAP,KAAoB8B,EAApB,KACMC,EAAYZ,EAAMa,OAIlBzB,EAFaP,IADFG,KAAKC,KAAKe,EAAMa,OAASJ,GAItCT,EAAMa,OACNJ,EAAe5B,EAEnB,OACE,sBAAKQ,UAAU,YAAf,UACE,uDAEA,oBAAGA,UAAU,OAAO,UAAQ,OAA5B,4BAEOR,GAFP,kBAGc4B,EAAe5B,EAAc4B,EAAe,EAH1D,cAGiErB,EAHjE,eAGoFwB,EAHpF,QAMA,sBAAKvB,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRyB,GAAG,kBACHzB,UAAU,eACV0B,MAAON,EACPO,SAAU,SAACC,GACTP,GAAiBO,EAAMC,OAAOH,OAC9BJ,EAAe,IAPnB,UAUE,wBAAQI,MAAO,EAAf,eACA,wBAAQA,MAAO,EAAf,eACA,wBAAQA,MAAO,GAAf,gBACA,wBAAQA,MAAO,GAAf,qBAIJ,uBAAOI,QAAQ,kBAAkB9B,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEV,MAAOqB,EAAMa,OACbjC,QAAS6B,EACT5B,YAAaA,EACbC,aAAc6B,QEtDtBS,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.bc3a9e02.chunk.js","sourcesContent":["import classNames from 'classnames';\n\ntype Props = {\n  total: number,\n  perPage: number,\n  currentPage: number,\n  onPageChange: (page: number) => void,\n};\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const lastPage = Math.ceil(total / perPage);\n  const isFirsPage = currentPage === 1;\n  const isLastPage = currentPage === lastPage;\n\n  const getPageCountList = () => {\n    const content = [];\n\n    for (let i = 1; i <= lastPage; i += 1) {\n      content.push(\n        <li\n          key={i}\n          className={\n            classNames('page-item', {\n              active: currentPage === i,\n            })\n          }\n        >\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href={`#${i}`}\n            onClick={() => onPageChange(i)}\n          >\n            {i}\n          </a>\n        </li>,\n      );\n    }\n\n    return content;\n  };\n\n  const lastPageList = isLastPage\n    ? total\n    : perPage * currentPage;\n\n  const getItemListPerPage = () => {\n    const content = [];\n\n    for (let i = perPage * currentPage - perPage + 1;\n      i <= lastPageList;\n      i += 1) {\n      content.push(<li data-cy=\"item\" key={i}>{`Item ${i}`}</li>);\n    }\n\n    return content;\n  };\n\n  const HandlePrevClick = () => {\n    let prevPage = 0;\n\n    if (currentPage !== 1) {\n      prevPage = currentPage - 1;\n      onPageChange(prevPage);\n    }\n  };\n\n  const HandleNextClick = () => {\n    let nextPage = 0;\n\n    if (currentPage !== lastPage) {\n      nextPage = currentPage + 1;\n      onPageChange(nextPage);\n    }\n  };\n\n  return (\n    <>\n      <ul className=\"pagination\">\n        <li className={classNames('page-item',\n          { disabled: isFirsPage })}\n        >\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href=\"#prev\"\n            aria-disabled={isFirsPage}\n            onClick={HandlePrevClick}\n          >\n            «\n          </a>\n        </li>\n        {getPageCountList()}\n        <li className={classNames('page-item',\n          { disabled: isLastPage })}\n        >\n          <a\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href=\"#next\"\n            aria-disabled={isLastPage}\n            onClick={HandleNextClick}\n          >\n            »\n          </a>\n        </li>\n      </ul>\n      <ul>\n        {getItemListPerPage()}\n      </ul>\n\n    </>\n\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Pagination } from './components/Pagination';\nimport { getNumbers } from './utils';\n\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const [itemsPerPage, setItemsPerPage] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n  const totalItem = items.length;\n  const lastPage = Math.ceil(items.length / itemsPerPage);\n  const isLastPage = currentPage === lastPage;\n\n  const lastPageList = isLastPage\n    ? items.length\n    : itemsPerPage * currentPage;\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        Page\n        {` ${currentPage}`}\n        {` (items ${itemsPerPage * currentPage - itemsPerPage + 1} - ${lastPageList} of ${totalItem})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={itemsPerPage}\n            onChange={(event) => {\n              setItemsPerPage(+event.target.value);\n              setCurrentPage(1);\n            }}\n          >\n            <option value={3}>3</option>\n            <option value={5}>5</option>\n            <option value={10}>10</option>\n            <option value={20}>20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={items.length}\n        perPage={itemsPerPage}\n        currentPage={currentPage}\n        onPageChange={setCurrentPage}\n      />\n\n    </div>\n  );\n};\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}